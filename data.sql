-- MySQL Test Data for Performance Comparison
-- This script will drop existing tables and create new ones with dummy data.
-- Use this script to populate your MySQL database for testing.

-- Disable foreign key checks temporarily to allow dropping tables in any order
SET FOREIGN_KEY_CHECKS = 0;

-- Drop existing tables if they exist
DROP TABLE IF EXISTS genre_product;
DROP TABLE IF EXISTS product_thumbnail;
DROP TABLE IF EXISTS product;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS notification;
DROP TABLE IF EXISTS comment;
DROP TABLE IF EXISTS cart;
DROP TABLE IF EXISTS address;
DROP TABLE IF EXISTS member;


-- Re-enable foreign key checks
SET FOREIGN_KEY_CHECKS = 1;

-- Create tables (simplified schema based on entities)

CREATE TABLE member (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_name VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    nickname VARCHAR(255) NOT NULL UNIQUE,
    role VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    is_active BOOLEAN NOT NULL,
    create_at DATETIME(6) NOT NULL,
    modify_at DATETIME(6) NOT NULL
);

CREATE TABLE address (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id BIGINT NOT NULL,
    address VARCHAR(255),
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE
);

CREATE TABLE genre (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    create_at DATETIME(6) NOT NULL,
    modify_at DATETIME(6) NOT NULL
);

CREATE TABLE product (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL UNIQUE,
    price DECIMAL(19, 2) NOT NULL,
    stock INT NOT NULL,
    content TEXT NOT NULL,
    create_at DATETIME(6) NOT NULL,
    modify_at DATETIME(6) NOT NULL
);

CREATE TABLE product_thumbnail (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    product_id BIGINT NOT NULL,
    image_path VARCHAR(255) NOT NULL,
    create_at DATETIME(6) NOT NULL,
    FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE
);

CREATE TABLE genre_product (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    genre_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    FOREIGN KEY (genre_id) REFERENCES genre(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE,
    UNIQUE (genre_id, product_id) -- Prevent duplicate genre-product associations
);

CREATE TABLE cart (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    amount INT NOT NULL,
    create_at DATETIME(6) NOT NULL,
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE,
    UNIQUE (member_id, product_id)
);

CREATE TABLE comment (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    content TEXT NOT NULL,
    grade INT,
    parent_id BIGINT,
    create_at DATETIME(6) NOT NULL,
    modify_at DATETIME(6) NOT NULL,
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE
);

CREATE TABLE notification (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id BIGINT NOT NULL,
    content VARCHAR(255),
    url VARCHAR(255),
    is_read BOOLEAN NOT NULL,
    create_at DATETIME(6) NOT NULL,
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE
);


-- Insert Member Data
-- Password '12345' BCrypt hashed
INSERT INTO member (user_name, password, nickname, role, email, is_active, create_at, modify_at) VALUES
('admin', '$2a$10$XJ8u0wS5mJb9.iK4f76vjOVp/V9o.X6b.a.0.X.r0.V.2.m.0.u1', 'admin', 'ROLE_ADMIN', 'admin@example.com', true, NOW(), NOW()),
('user1', '$2a$10$XJ8u0wS5mJb9.iK4f76vjOVp/V9o.X6b.a.0.X.r0.V.2.m.0.u1', 'user1', 'ROLE_USER', 'user1@example.com', true, NOW(), NOW());

-- Insert Genres
INSERT INTO genre (name, create_at, modify_at) VALUES ('Action', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Adventure', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('RPG', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Strategy', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Simulation', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Sports', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Puzzle', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Horror', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Racing', NOW(), NOW());
INSERT INTO genre (name, create_at, modify_at) VALUES ('Fighting', NOW(), NOW());

-- Insert Products, ProductThumbnails, and GenreProducts
-- This part will be generated by the agent to insert a large number of records.
-- Due to the large number of inserts, this will be a long script.

DELIMITER //

CREATE PROCEDURE InsertDummyData()
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE product_id_val BIGINT;
    DECLARE num_thumbnails INT;
    DECLARE num_genres INT;
    DECLARE j INT;
    DECLARE random_genre_id BIGINT;
    DECLARE random_price DECIMAL(19, 2);
    DECLARE random_stock INT;
    DECLARE random_days_ago INT;
    DECLARE create_at_val DATETIME(6);

    WHILE i <= 5000 DO
        SET random_price = 10000 + FLOOR(RAND() * 90000); -- 10000 to 99999
        SET random_stock = FLOOR(RAND() * 100) + 1; -- 1 to 100
        -- Calculate days ago based on product ID to ensure creation dates are somewhat ordered by ID
        -- Max days ago (e.g., 365 days) for the first product, decreasing to 0 for the last product
        SET random_days_ago = FLOOR(365 * (1 - (i - 1) / 5000.0));
        SET create_at_val = DATE_SUB(NOW(), INTERVAL random_days_ago DAY);

        INSERT INTO product (product_name, price, stock, content, create_at, modify_at)
        VALUES (CONCAT('Product ', i), random_price, random_stock, CONCAT('Content for Product ', i), create_at_val, NOW());

        SET product_id_val = LAST_INSERT_ID();

        -- Insert ProductThumbnails (1 to 3 per product)
        SET num_thumbnails = FLOOR(RAND() * 3) + 1;
        SET j = 0;
        WHILE j < num_thumbnails DO
            INSERT INTO product_thumbnail (product_id, image_path, create_at)
            VALUES (product_id_val, CONCAT('/images/product_', product_id_val, '_thumb_', j, '.jpg'), NOW());
            SET j = j + 1;
        END WHILE;

        -- Insert GenreProducts (1 to 3 per product)
        SET num_genres = FLOOR(RAND() * 3) + 1;
        SET j = 0;
        WHILE j < num_genres DO
            -- Select a random genre ID from the existing genres
            SELECT id INTO random_genre_id FROM genre ORDER BY RAND() LIMIT 1;

            -- Attempt to insert, ignore if duplicate (due to UNIQUE constraint)
            INSERT IGNORE INTO genre_product (genre_id, product_id)
            VALUES (random_genre_id, product_id_val);

            SET j = j + 1;
        END WHILE;

        SET i = i + 1;
    END WHILE;
END //

DELIMITER ;

CALL InsertDummyData();

DROP PROCEDURE IF EXISTS InsertDummyData;

-- Insert Sample Address Data for user1
INSERT INTO address (member_id, address) VALUES
((SELECT id FROM member WHERE user_name = 'user1'), 'Main St Apt 101');

-- Insert Sample Cart Data for user1
INSERT INTO cart (member_id, product_id, amount, create_at) VALUES
((SELECT id FROM member WHERE username = 'user1'), (SELECT id FROM product WHERE product_name = 'Product 1'), 2, NOW()),
((SELECT id FROM member WHERE username = 'user1'), (SELECT id FROM product WHERE product_name = 'Product 2'), 1, NOW());

-- Insert Sample Comment Data for user1 on Product 1
INSERT INTO comment (member_id, product_id, content, grade, create_at, modify_at) VALUES
((SELECT id FROM member WHERE user_name = 'user1'), (SELECT id FROM product WHERE product_name = 'Product 1'), 'This is a great product!', 5, NOW(), NOW());

-- Insert Sample Notification Data for user1
INSERT INTO notification (member_id, content, url, is_read, create_at) VALUES
((SELECT id FROM member WHERE user_name = 'user1'), 'Your order has been shipped!', '/orders/123', FALSE, NOW());

-- Re-enable foreign key checks (already done at the beginning, but good practice to ensure)
SET FOREIGN_KEY_CHECKS = 1;