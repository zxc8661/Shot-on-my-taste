openapi: 3.0.0
info:
  title: Member API
  version: 1.0.0
paths:
  /api/member/register:
    post:
      summary: 회원 가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDTO"
      responses:
        "200":
          description: 성공
        "400":
          description: "DUPLICATE_USERNAME, DUPLICATE_NICKNAME, BAD_REGISTER_REQUEST, INVALID_EMAIL_FORMAT"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/member/withdrawal:
    post:
      summary: 회원 탈퇴
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 성공
        "401":
          description: "USERNAME_NOT_MATCH_PASSWORD, NOT_FOUND_MEMBER, WITHDRAWAL_MEMBER"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/public/member/checkUsername:
    get:
      summary: 아이디 중복 확인
      parameters:
        - name: userName
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 사용 가능
        "400":
          description: "DUPLICATE_USERNAME"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/public/member/checkNickname:
    get:
      summary: 닉네임 중복 확인
      parameters:
        - name: nickname
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 사용 가능
        "400":
          description: "DUPLICATE_NICKNAME"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/user/member/detail:
    get:
      summary: 회원 상세 정보 조회
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberDetail"
        "404":
          description: "NOT_FOUND_MEMBER"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/user/member/modify/email:
    put:
      summary: 이메일 수정
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 성공
        "400":
          description: "INVALID_EMAIL_FORMAT"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/user/member/modify/nickname:
    put:
      summary: 닉네임 수정
      security:
        - bearerAuth: []
      parameters:
        - name: nickname
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 성공
        "400":
          description: "DUPLICATE_NICKNAME"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/user/member/modify/password:
    put:
      summary: 비밀번호 수정
      security:
        - bearerAuth: []
      parameters:
        - name: newPassword
          in: query
          required: true
          schema:
            type: string
        - name: oldPassword
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 성공
        "400":
          description: "NOT_MATCH_PASSWORDS"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/admin/history:
    get:
      summary: 회원 활동 기록 조회 (관리자)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 30
        - name: memberId
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberHistoryDTOPage"
        "401":
          description: "NOT_ADMIN"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
    RegisterRequestDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        nickname:
          type: string
        email:
          type: string
    MemberDetail:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        nickname:
          type: string
        email:
          type: string
    MemberHistoryDTO:
      type: object
      properties:
        id:
          type: integer
        activityType:
          type: string
        activityDetails:
          type: string
        activityDate:
          type: string
          format: date-time
    MemberHistoryDTOPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/MemberHistoryDTO"
        pageable:
          type: object
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          type: object
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
